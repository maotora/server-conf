
#user html;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #Avoid ratelimiting whitelisted IPs.
    geo $limit {
	    default 1;
	    10.0.0.0/8 0;
	    192.168.0.0/24 0;
    }

    map $limit $limit_key {
	    0 "";
	    1 $binary_remote_addr;
    }

    #Rate limit stuff.
    limit_req_zone $limit_key zone=nodelimit:10m rate=5r/s;
    limit_req_zone $limit_key zone=rootlimit:10m rate=10r/s;

    #gzip  on;

    server {
	    listen	80;
	    listen	[::]:80;
	    server_name	tokeo.archnoob.com archnoob.com www.archnoob.com www.hackeac.com hackeac.com;
	    return 301 https://$host$request_uri;
    }

    server {
	 listen		443 ssl;
	 listen		[::]:443 ssl;
	 server_name	archnoob.com www.archnoob.com;

	 ssl_certificate /etc/letsencrypt/live/archnoob.com/fullchain.pem;
	 ssl_certificate_key /etc/letsencrypt/live/archnoob.com/privkey.pem;

	 ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	 ssl_prefer_server_ciphers on;
	 ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';


	    location = /robots.txt {
		    allow all;
		    log_not_found off;
		    access_log off;
	    }

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
	    limit_req zone=rootlimit burst=20 nodelay;
        }

	#ACME challenge
        location ^~ /.well-known {
		allow all;
		alias /var/lib/letsencrypt/.well-known/;
		default_type "text/plain";
		try_files $uri =404;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

    }

    server {
	 listen		443 ssl http2;
	 listen		[::]:443 ssl http2;
	 server_name	tokeo.archnoob.com;

        #access_log  logs/host.access.log  main;
	 location / {
		 root	/usr/share/nginx/html;
		 index index.htm index.html;
		 limit_req zone=rootlimit burst=20 nodelay;
	 }

	location /app {
		return 302 /app/;
	}

        location /app/ {
		limit_req zone=nodelimit burst=10 nodelay;
		proxy_pass http://127.0.0.1:8080/;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection 'upgrade';
		proxy_set_header Host $host;
		proxy_cache_bypass $http_upgrade;
        }

	    location = /robots.txt {
		    allow all;
		    log_not_found off;
		    access_log off;
	    }

	#ACME challenge
        location ^~ /.well-known {
		allow all;
        }

    }

    #Wordpress stuff

    upstream php {
	server unix:/tmp/php-cgi.socket;
	server 127.0.0.0:9000;
    }

    server {
	server_name	hackeac.com www.hackeac.com;

	location / {
		root /usr/share/webapps/hackeac/wordpress;
		index index.php;
		try_files $uri $uri/ /index.php?$args;
	}

	location = /favicon.ico {
	    log_not_found off;
	    access_log off;
	}

	location = /robots.txt {
	    allow all;
	    log_not_found off;
	    access_log off;
	}

	location ~ \.php$ {
	    include fastcgi.conf;
	    fastcgi_intercept_errors on;
	    fastcgi_pass php;
	}

	location ~* \.(js|css|png|jpg|jpeg|git|ico)$ {
	    expires max;
	    log_not_found off;
	}

	#ACME challenge
        location ^~ /.well-known {
		allow all;
		alias /var/lib/letsencrypt/.well-known/;
		default_type "text/plain";
		try_files $uri =404;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
